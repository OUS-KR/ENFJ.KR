// today-game.js

// Global variables for daily seed and PRNG
let currentRandFn = null;
let gameInProgress = false;
let currentCorrectAnswer = null; // Used by some games for validation

// Utility functions (copied from index.html)
function getDailySeed() {
    const today = new Date();
    return today.getFullYear() * 10000 + (today.getMonth() + 1) * 100 + today.getDate();
}

function mulberry32(seed) {
    return function() {
        seed |= 0;
        seed = seed + 0x6D2B79F5 | 0;
        let t = Math.imul(seed ^ seed >>> 15, 1 | seed);
        t = t + Math.imul(t ^ t >>> 7, 61 | t) | 0;
        return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }
}

function getDayOfWeekText(day) {
    const messages = [
        "Ìïú Ï£ºÎ•º ÎßàÎ¨¥Î¶¨ÌïòÎ©∞, Îî∞ÎúªÌïú Í∞êÏÑ±ÏúºÎ°ú Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï¥ Î≥¥ÏÑ∏Ïöî.", // Sunday
        "ÏÉàÎ°úÏö¥ Ìïú Ï£º, Í∏çÏ†ïÏ†ÅÏù∏ ÏòÅÌñ•Î†•ÏúºÎ°ú ÏãúÏûëÌï¥ Î≥¥ÏÑ∏Ïöî!", // Monday
        "Ïò§ÎäòÏùÄ ÎãπÏã†Ïùò ÌÜµÏ∞∞Î†•ÏúºÎ°ú ÏÇ¨ÎûåÎì§ÏùÑ ÎèÑÏö∏ Ïàò ÏûàÎäî ÎÇ†ÏûÖÎãàÎã§.", // Tuesday
        "Ï£º Ï§ëÎ∞ò, Ï°∞ÌôîÎ°úÏö¥ Ìï¥Í≤∞Ï±ÖÏúºÎ°ú Î™®ÎëêÎ•º ÌñâÎ≥µÌïòÍ≤å ÎßåÎì§Ïñ¥ Î≥¥ÏÑ∏Ïöî.", // Wednesday
        "ÎãπÏã†Ïùò Î¶¨ÎçîÏã≠ÏùÑ Î∞úÌúòÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï¥ Î≥º ÏãúÍ∞ÑÏûÖÎãàÎã§.", // Thursday
        "Ï£ºÎßêÏùÑ ÏïûÎëî Í∏àÏöîÏùº, Í∞ÄÎ≥çÍ≤å Í≥µÍ∞ê Îä•Î†•ÏùÑ Î∞úÌúòÌï¥ Î≥¥ÏÑ∏Ïöî.", // Friday
        "Ïó¨Ïú†Î°úÏö¥ ÌÜ†ÏöîÏùº, Îã§Î•∏ ÏÇ¨ÎûåÏùò ÎßàÏùåÏùÑ ÎßûÏ∂∞Î≥¥Îäî Í±¥ Ïñ¥Îñ†Ïã†Í∞ÄÏöî?", // Saturday
    ];
    return messages[day];
}

function showFeedback(isCorrect, message) {
    const feedbackMessage = document.getElementById('feedbackMessage');
    if (isCorrect) {
        feedbackMessage.innerText = message || "Ï†ïÎãµÏûÖÎãàÎã§! Ïó≠Ïãú ENFJ, ÏÇ¨ÎûåÎì§Ïùò ÎßàÏùåÏùÑ Ïûò ÏïÑÎäîÍµ∞Ïöî.";
        feedbackMessage.className = "feedback-message correct";
    } else {
        feedbackMessage.innerText = message || "ÏïÑÏâΩÎÑ§Ïöî. Îã§Î•∏ ÏÇ¨ÎûåÏùò ÏûÖÏû•ÏóêÏÑúÎäî Ïñ¥ÎñªÍ≤å ÏÉùÍ∞ÅÌï†ÍπåÏöî?";
        feedbackMessage.className = "feedback-message incorrect";
    }
    gameInProgress = false;
}

// --- Game Implementations for ENFJ (5 New Games based on classics) ---

// Game 1: ÌòëÎ†• Ìå©Îß® Ï±åÎ¶∞ÏßÄ (Cooperative Pac-Man Challenge - Arcade/Puzzle)
function setupCooperativePacManChallengeGame() {
    document.getElementById('gameTitle').innerText = "Ïò§ÎäòÏùò Í≤åÏûÑ: ÌòëÎ†• Ìå©Îß® Ï±åÎ¶∞ÏßÄ";
    const gameArea = document.getElementById('gameArea');
    const description = "Ïú†Î†πÏùÑ ÌîºÌï¥ Î™®Îì† ÏπúÍµ¨(‚óè)Î•º Íµ¨Ï∂úÌïòÏÑ∏Ïöî! Î≤Ω(‚ñ†)Ïóê Î∂ÄÎî™ÌûàÏßÄ ÏïäÎèÑÎ°ù Ï°∞Ïã¨ÌïòÏÑ∏Ïöî.";
    document.getElementById('gameDescription').innerText = description;

    const mazeWidth = 10;
    const mazeHeight = 10;
    let maze = [];
    let playerPos = { x: 1, y: 1 };
    let score = 0;
    let totalFriends = 0;

    function generateMaze(seed) {
        const rand = mulberry32(seed);
        let newMaze = Array(mazeHeight).fill(0).map(() => Array(mazeWidth).fill(' '));

        // Create border walls
        for (let i = 0; i < mazeWidth; i++) {
            newMaze[0][i] = '‚ñ†';
            newMaze[mazeHeight - 1][i] = '‚ñ†';
        }
        for (let i = 0; i < mazeHeight; i++) {
            newMaze[i][0] = '‚ñ†';
            newMaze[i][mazeWidth - 1] = '‚ñ†';
        }

        // Place internal walls randomly
        for (let i = 0; i < mazeHeight * mazeWidth / 5; i++) {
            let x, y;
            do {
                x = Math.floor(rand() * mazeWidth);
                y = Math.floor(rand() * mazeHeight);
            } while (newMaze[y][x] !== ' ');
            newMaze[y][x] = '‚ñ†';
        }

        // Place friends (dots)
        totalFriends = 0;
        for (let i = 0; i < mazeHeight * mazeWidth / 8; i++) {
            let x, y;
            do {
                x = Math.floor(rand() * mazeWidth);
                y = Math.floor(rand() * mazeHeight);
            } while (newMaze[y][x] !== ' ');
            newMaze[y][x] = '‚óè';
            totalFriends++;
        }

        // Place player (ensure not on wall or friend initially)
        do {
            playerPos = { x: Math.floor(rand() * mazeWidth), y: Math.floor(rand() * mazeHeight) };
        } while (newMaze[playerPos.y][playerPos.x] !== ' ');
        
        return newMaze;
    }

    function renderMaze() {
        gameArea.innerHTML = '';
        const mazeDiv = document.createElement('div');
        mazeDiv.style.display = 'grid';
        mazeDiv.style.gridTemplateColumns = `repeat(${mazeWidth}, 25px)`
        mazeDiv.style.gridTemplateRows = `repeat(${mazeHeight}, 25px)`
        mazeDiv.style.border = '2px solid var(--border-color)';
        mazeDiv.style.margin = '20px auto';
        mazeDiv.style.backgroundColor = 'var(--background-color-light)';

        for (let y = 0; y < mazeHeight; y++) {
            for (let x = 0; x < mazeWidth; x++) {
                const cell = document.createElement('div');
                cell.style.width = '25px';
                cell.style.height = '25px';
                cell.style.display = 'flex';
                cell.style.justifyContent = 'center';
                cell.style.alignItems = 'center';
                cell.style.fontSize = '1.2em';
                cell.style.fontWeight = 'bold';
                cell.style.color = 'var(--text-color)';

                if (playerPos.x === x && playerPos.y === y) {
                    cell.innerText = 'üòÄ'; // Player
                    cell.style.backgroundColor = 'var(--accent-color)';
                } else if (maze[y][x] === '‚ñ†') {
                    cell.innerText = '‚ñ†'; // Wall
                    cell.style.backgroundColor = 'var(--secondary-color)';
                    cell.style.color = 'var(--text-color-inverted)';
                } else if (maze[y][x] === '‚óè') {
                    cell.innerText = '‚óè'; // Friend (dot)
                    cell.style.color = 'var(--success-color)';
                } else {
                    cell.innerText = '';
                }
                mazeDiv.appendChild(cell);
            }
        }
        gameArea.appendChild(mazeDiv);
        const scoreDisplay = document.createElement('p');
        scoreDisplay.id = 'pacmanScore';
        scoreDisplay.innerText = `Íµ¨Ï∂úÌïú ÏπúÍµ¨: ${score} / ${totalFriends}`;
        gameArea.appendChild(scoreDisplay);
    }

    function movePlayer(dx, dy) {
        if (!gameInProgress) return;

        const newX = playerPos.x + dx;
        const newY = playerPos.y + dy;

        if (newX >= 0 && newX < mazeWidth && newY >= 0 && newY < mazeHeight) {
            if (maze[newY][newX] === '‚ñ†') {
                // Hit a wall, do nothing
                return;
            }

            playerPos.x = newX;
            playerPos.y = newY;

            if (maze[newY][newX] === '‚óè') {
                maze[newY][newX] = ' '; // Eat friend
                score++;
                document.getElementById('pacmanScore').innerText = `Íµ¨Ï∂úÌïú ÏπúÍµ¨: ${score} / ${totalFriends}`;
            }

            renderMaze();

            if (score === totalFriends) {
                showFeedback(true, "Î™®Îì† ÏπúÍµ¨Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Íµ¨Ï∂úÌñàÏäµÎãàÎã§! ÌõåÎ•≠Ìïú ÌòëÎ†• Ï†ïÏã†!");
                gameInProgress = false;
                document.removeEventListener('keydown', handleKeyDown);
            }
        }
    }

    function handleKeyDown(event) {
        switch (event.key) {
            case 'ArrowUp': movePlayer(0, -1); break;
            case 'ArrowDown': movePlayer(0, 1); break;
            case 'ArrowLeft': movePlayer(-1, 0); break;
            case 'ArrowRight': movePlayer(1, 0); break;
        }
    }

    maze = generateMaze(getDailySeed());
    renderMaze();
    document.getElementById('game-input-area').innerHTML = '';
    gameInProgress = true;
    document.addEventListener('keydown', handleKeyDown);
}

// Game 2: Í¥ÄÍ≥ÑÏùò Ï≤¥Ïä§ ÌçºÏ¶ê (Relationship Chess Puzzle - Board Game/Puzzle)
function setupRelationshipChessPuzzleGame() {
    document.getElementById('gameTitle').innerText = "Ïò§ÎäòÏùò Í≤åÏûÑ: Í¥ÄÍ≥ÑÏùò Ï≤¥Ïä§ ÌçºÏ¶ê";
    const gameArea = document.getElementById('gameArea');
    const description = "Ï£ºÏñ¥ÏßÑ ÏÉÅÌô©ÏóêÏÑú Í∞ÄÏû• Ï°∞ÌôîÎ°úÏö¥ Í¥ÄÍ≥ÑÎ•º ÎßåÎì§ Ïàò ÏûàÎäî Ìïú ÏàòÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.";
    document.getElementById('gameDescription').innerText = description;

    const puzzles = [
        {
            board: [
                "R N B Q K B N R",
                "P P P P P P P P",
                "               ",
                "               ",
                "               ",
                "               ",
                "p p p p p p p p",
                "r n b q k b n r"
            ],
            goal: "Î∞± Ìè∞ÏùÑ ÏïàÏ†ÑÌïòÍ≤å Ï†ÑÏßÑÏãúÏºú Ìùë Î£©ÏùÑ ÏúÑÌòëÌïòÏÑ∏Ïöî.",
            correctMove: "P-P4" // Example: Pawn from P2 to P4
        },
        {
            board: [
                "R N B Q K B N R",
                "P P P P P P P P",
                "               ",
                "               ",
                "               ",
                "               ",
                "p p p p p p p p",
                "r n b q k b n r"
            ],
            goal: "Ìùë ÎÇòÏù¥Ìä∏Î•º ÏõÄÏßÅÏó¨ Î∞± ÌÄ∏ÏùÑ Î≥¥Ìò∏ÌïòÏÑ∏Ïöî.",
            correctMove: "N-N6" // Example: Knight from N8 to N6
        }
    ];

    const puzzle = puzzles[Math.floor(currentRandFn() * puzzles.length)];
    currentCorrectAnswer = puzzle.correctMove.toLowerCase(); // Store correct answer for validation

    gameArea.innerHTML = `
        <div class="game-display question">${puzzle.goal}</div>
        <div id="chessBoard" style="display: grid; grid-template-columns: repeat(8, 40px); grid-template-rows: repeat(8, 40px); border: 2px solid var(--border-color); margin: 20px auto;">
            <!-- Chess board will be rendered here -->
        </div>
        <div class="game-input">
            <input type="text" id="chessMoveInput" placeholder="Ïòà: P-P4 (Îßê-Ïπ∏)"/>
            <button id="submitChessMove">ÌôïÏù∏</button>
        </div>
    `;
    document.getElementById('game-input-area').innerHTML = '';
    gameInProgress = true;

    function renderBoard() {
        const boardDiv = document.getElementById('chessBoard');
        boardDiv.innerHTML = '';
        const pieceMap = {
            'R': '‚ôú', 'N': '‚ôû', 'B': '‚ôù', 'Q': '‚ôõ', 'K': '‚ôö', 'P': '‚ôü',
            'r': '‚ôñ', 'n': '‚ôò', 'b': '‚ôó', 'q': '‚ôï', 'k': '‚ôî', 'p': '‚ôô'
        };

        puzzle.board.forEach((rowStr, rIdx) => {
            const row = rowStr.split(' ');
            row.forEach((cellContent, cIdx) => {
                const cell = document.createElement('div');
                cell.style.width = '40px';
                cell.style.height = '40px';
                cell.style.display = 'flex';
                cell.style.justifyContent = 'center';
                cell.style.alignItems = 'center';
                cell.style.fontSize = '1.5em';
                cell.style.backgroundColor = (rIdx + cIdx) % 2 === 0 ? 'var(--background-color-light)' : 'var(--background-color)';
                cell.style.color = 'var(--text-color)';
                cell.innerText = pieceMap[cellContent] || '';
                boardDiv.appendChild(cell);
            });
        });
    }

    renderBoard();

    document.getElementById('submitChessMove').addEventListener('click', function() {
        if (!gameInProgress) return;
        const input = document.getElementById('chessMoveInput').value.trim().toLowerCase();
        if (input === currentCorrectAnswer) {
            showFeedback(true, "Ï†ïÎãµÏûÖÎãàÎã§! ÌõåÎ•≠Ìïú Ï†ÑÎûµÏúºÎ°ú Í¥ÄÍ≥ÑÏùò Ï°∞ÌôîÎ•º Ïù¥ÎÅåÏñ¥ÎÉàÍµ∞Ïöî!");
        } else {
            showFeedback(false, `ÏïÑÏâΩÎÑ§Ïöî. Ï†ïÎãµÏùÄ ${puzzle.correctMove} ÏûÖÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Î≥¥ÏÑ∏Ïöî.`);
        }
        document.getElementById('chessMoveInput').disabled = true;
        this.disabled = true;
    });
}

// Game 3: Í≥µÍ∞êÏùò TRPG Ïä§ÌÜ†Î¶¨ (Empathy TRPG Story - TRPG-lite)
function setupEmpathyTRPGStoryGame() {
    document.getElementById('gameTitle').innerText = "Ïò§ÎäòÏùò Í≤åÏûÑ: Í≥µÍ∞êÏùò TRPG Ïä§ÌÜ†Î¶¨";
    const gameArea = document.getElementById('gameArea');
    const description = "ÎãπÏã†ÏùÄ Î™®ÌóòÍ∞ÄÏûÖÎãàÎã§. Ï£ºÏñ¥ÏßÑ ÏÉÅÌô©ÏóêÏÑú Í∞ÄÏû• Í≥µÍ∞êÏ†ÅÏù¥Í≥† Í∏çÏ†ïÏ†ÅÏù∏ Í≤∞Í≥ºÎ•º Ïù¥ÎÅåÏñ¥ÎÇº ÏÑ†ÌÉùÏùÑ ÌïòÏÑ∏Ïöî.";
    document.getElementById('gameDescription').innerText = description;

    const stories = [
        {
            scenario: "ÎßàÏùÑ Ïô∏Í≥ΩÏóêÏÑú Ïö∏Í≥† ÏûàÎäî ÏïÑÏù¥Î•º Î∞úÍ≤¨ÌñàÏäµÎãàÎã§. ÏïÑÏù¥Îäî ÏûÉÏñ¥Î≤ÑÎ¶∞ Í∞ïÏïÑÏßÄÎ•º Ï∞æÍ≥† ÏûàÏäµÎãàÎã§.",
            choices: [
                { text: "ÏïÑÏù¥Ïùò ÏÜêÏùÑ Ïû°Í≥† Ìï®Íªò Í∞ïÏïÑÏßÄÎ•º Ï∞æÏïÑ ÎÇòÏÑ†Îã§.", outcome: "ÏïÑÏù¥ÏóêÍ≤å ÌÅ∞ ÏúÑÎ°úÍ∞Ä ÎêòÏóàÍ≥†, Ìï®Íªò Í∞ïÏïÑÏßÄÎ•º Ï∞æÏïòÏäµÎãàÎã§. ÏïÑÏù¥Îäî ÎãπÏã†ÏóêÍ≤å ÍπäÏù¥ Í∞êÏÇ¨ÌñàÏäµÎãàÎã§.", correct: true },
                { text: "ÎßàÏùÑ ÏÇ¨ÎûåÎì§ÏóêÍ≤å Í∞ïÏïÑÏßÄÎ•º Ï∞æÏïÑÎã¨ÎùºÍ≥† Î∂ÄÌÉÅÌïúÎã§.", outcome: "ÎßàÏùÑ ÏÇ¨ÎûåÎì§Ïù¥ Í∞ïÏïÑÏßÄÎ•º Ï∞æÏïòÏßÄÎßå, ÏïÑÏù¥Îäî ÎãπÏã†Ïù¥ ÏßÅÏ†ë ÎèÑÏôÄÏ£ºÏßÄ ÏïäÏïÑ Ï°∞Í∏à ÏÑúÏö¥Ìï¥ÌñàÏäµÎãàÎã§.", correct: false },
                { text: "ÏïÑÏù¥ÏóêÍ≤å ÏÉà Í∞ïÏïÑÏßÄÎ•º ÏÇ¨Ï£ºÍ≤†Îã§Í≥† ÏïΩÏÜçÌïúÎã§.", outcome: "ÏïÑÏù¥Îäî Ïû†Ïãú Í∏∞ÎªêÌñàÏßÄÎßå, ÏûÉÏñ¥Î≤ÑÎ¶∞ Í∞ïÏïÑÏßÄÏóê ÎåÄÌïú Ïä¨ÌîîÏùÄ Ïó¨Ï†ÑÌñàÏäµÎãàÎã§.", correct: false },
                { text: "Í∞ïÏïÑÏßÄÎäî Ïä§Ïä§Î°ú ÎèåÏïÑÏò¨ Í≤ÉÏù¥ÎùºÍ≥† ÎßêÌïòÎ©∞ ÏßÄÎÇòÍ∞ÑÎã§.", outcome: "ÏïÑÏù¥Îäî ÎçîÏö± Ïä¨ÌçºÌïòÎ©∞ ÎãπÏã†ÏùÑ Ïô∏Î©¥ÌñàÏäµÎãàÎã§.", correct: false }
            ]
        },
        {
            scenario: "ÎèôÎ£å Î™®ÌóòÍ∞ÄÍ∞Ä Ï†ÑÌà¨ Ï§ë ÌÅ∞ Î∂ÄÏÉÅÏùÑ ÏûÖÍ≥† Ï†àÎßùÏóê Îπ†Ï†∏ ÏûàÏäµÎãàÎã§. Í∑∏Îäî ÏûêÏã†Ïù¥ ÏßêÏù¥ ÎêúÎã§Í≥† ÏÉùÍ∞ÅÌï©ÎãàÎã§.",
            choices: [
                { text: "Í∑∏Ïùò ÏÜêÏùÑ Ïû°Í≥† 'Ïö∞Î¶¨Îäî Ìï®ÍªòÏù¥Î©∞, ÎãπÏã†ÏùÄ ÏßêÏù¥ ÏïÑÎãàÎã§'ÎùºÍ≥† ÎßêÌïúÎã§.", outcome: "ÎèôÎ£åÎäî ÎãπÏã†Ïùò ÏßÑÏã¨Ïóê Í∞êÎèôÌïòÏó¨ Îã§Ïãú ÏùºÏñ¥ÏÑ§ Ïö©Í∏∞Î•º ÏñªÏóàÏäµÎãàÎã§.", correct: true },
                { text: "ÏπòÎ£å ÎßàÎ≤ïÏùÑ Í±∏Ïñ¥Ï£ºÍ≥† 'Îπ®Î¶¨ ÌöåÎ≥µÌïòÎùº'Í≥† ÎèÖÎ†§ÌïúÎã§.", outcome: "ÎèôÎ£åÎäî ÏπòÎ£åÏóê Í∞êÏÇ¨ÌñàÏßÄÎßå, ÎßàÏùåÏÜçÏùò Ï†àÎßùÍ∞êÏùÄ ÏôÑÏ†ÑÌûà ÏÇ¨ÎùºÏßÄÏßÄ ÏïäÏïòÏäµÎãàÎã§.", correct: false },
                { text: "Îã§Î•∏ ÎèôÎ£åÎì§ÏóêÍ≤å Í∑∏Î•º Î∂ÄÏ∂ïÌï¥Îã¨ÎùºÍ≥† ÏßÄÏãúÌïúÎã§.", outcome: "ÎèôÎ£åÎäî ÎèÑÏõÄÏóê Í∞êÏÇ¨ÌñàÏßÄÎßå, Ïó¨Ï†ÑÌûà ÏûêÏã†Ïù¥ ÏßêÏù¥ ÎêúÎã§Îäî ÏÉùÍ∞ÅÏóê ÏÇ¨Î°úÏû°ÌòîÏäµÎãàÎã§.", correct: false },
                { text: "Í∑∏Î•º ÎÇ®Í≤®ÎëêÍ≥† Î®ºÏ†Ä Ï†ÑÏßÑÌïúÎã§.", outcome: "ÎèôÎ£åÎäî Î≤ÑÎ†§Ï°åÎã§Í≥† ÎäêÎÅºÎ©∞ ÍπäÏùÄ ÏÉÅÏ≤òÎ•º Î∞õÏïòÏäµÎãàÎã§.", correct: false }
            ]
        }
    ];

    const story = stories[Math.floor(currentRandFn() * stories.length)];

    gameArea.innerHTML = `
        <div class="game-display question"><b>ÏÉÅÌô©:</b> ${story.scenario}</div>
        <div class="game-display">ÎãπÏã†Ïùò ÏÑ†ÌÉùÏùÄ?</div>
        <div class="choices" id="trpgChoices">
            ${story.choices.map((choice, index) => `<button class="choice-btn" data-index="${index}">${choice.text}</button>`).join('')}
        </div>
    `;
    document.getElementById('game-input-area').innerHTML = '';
    gameInProgress = true;

    document.querySelectorAll('#trpgChoices .choice-btn').forEach(button => {
        button.addEventListener('click', function() {
            if (!gameInProgress) return;
            const selectedIndex = parseInt(this.dataset.index);
            const selectedChoice = story.choices[selectedIndex];
            showFeedback(selectedChoice.correct, selectedChoice.outcome);
            document.querySelectorAll('#trpgChoices .choice-btn').forEach(btn => btn.disabled = true);
        });
    });
}

// Game 4: Í∏çÏ†ï ÏóêÎÑàÏßÄ ÏäàÌåÖ (Positive Energy Shooting - Shooting/Reaction)
function setupPositiveEnergyShootingGame() {
    document.getElementById('gameTitle').innerText = "Ïò§ÎäòÏùò Í≤åÏûÑ: Í∏çÏ†ï ÏóêÎÑàÏßÄ ÏäàÌåÖ";
    const gameArea = document.getElementById('gameArea');
    const description = "ÌôîÎ©¥Ïóê ÎÇòÌÉÄÎÇòÎäî Î∂ÄÏ†ïÏ†ÅÏù∏ ÏÉùÍ∞Å(‚ùå)ÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Í∏çÏ†ï ÏóêÎÑàÏßÄ(‚ú®)Î°ú Î∞îÍæ∏ÏÑ∏Ïöî! Í∏çÏ†ïÏ†ÅÏù∏ ÏÉùÍ∞Å(‚ú®)ÏùÄ Í∑∏ÎåÄÎ°ú ÎëêÏÑ∏Ïöî.";
    document.getElementById('gameDescription').innerText = description;

    const gameDuration = 15000; // 15 seconds
    let score = 0;
    let timer = gameDuration / 1000;
    let gameInterval;
    let spawnInterval;

    gameArea.innerHTML = `
        <div class="game-display">Ï†êÏàò: <span id="energyScore">0</span></div>
        <div class="game-display">ÎÇ®ÏùÄ ÏãúÍ∞Ñ: <span id="energyTimer">${timer}</span>Ï¥à</div>
        <div id="shootingArea" style="width: 100%; height: 300px; border: 2px solid var(--border-color); margin: 20px auto; position: relative; overflow: hidden; cursor: crosshair; background-color: var(--background-color-light);">
            <!-- Targets will appear here -->
        </div>
        <button id="startGameBtn" class="choice-btn" style="margin-top: 20px;">Í≤åÏûÑ ÏãúÏûë</button>
    `;
    document.getElementById('game-input-area').innerHTML = '';
    gameInProgress = false;

    const shootingArea = document.getElementById('shootingArea');
    const energyScoreDisplay = document.getElementById('energyScore');
    const energyTimerDisplay = document.getElementById('energyTimer');
    const startGameBtn = document.getElementById('startGameBtn');

    function spawnTarget(seed) {
        const rand = mulberry32(seed + Date.now()); // Use current time for more dynamic spawning
        const type = rand() < 0.7 ? 'negative' : 'positive'; // More negative targets to convert
        const target = document.createElement('div');
        target.className = 'energy-target';
        target.innerText = type === 'negative' ? '‚ùå' : '‚ú®';
        target.dataset.type = type;
        target.style.position = 'absolute';
        target.style.left = `${rand() * (shootingArea.offsetWidth - 30)}px`;
        target.style.top = `${rand() * (shootingArea.offsetHeight - 30)}px`;
        target.style.fontSize = '1.5em';
        target.style.cursor = 'pointer';
        target.style.transition = 'opacity 0.5s ease-out';

        target.addEventListener('click', () => {
            if (!gameInProgress) return;
            if (target.dataset.type === 'negative') {
                score++;
                energyScoreDisplay.innerText = score;
                target.innerText = '‚ú®'; // Transform to positive
                target.style.color = 'var(--success-color)';
                target.style.pointerEvents = 'none'; // Can't click again
            } else {
                score = Math.max(0, score - 1); // Penalty for clicking positive
                energyScoreDisplay.innerText = score;
            }
        });

        shootingArea.appendChild(target);

        // Remove target after some time
        setTimeout(() => {
            if (target.parentNode === shootingArea) {
                shootingArea.removeChild(target);
            }
        }, 2000);
    }

    function startGame() {
        score = 0;
        timer = gameDuration / 1000;
        energyScoreDisplay.innerText = score;
        energyTimerDisplay.innerText = timer;
        shootingArea.innerHTML = '';
        gameInProgress = true;
        startGameBtn.disabled = true;

        gameInterval = setInterval(() => {
            timer--;
            energyTimerDisplay.innerText = timer;
            if (timer <= 0) {
                clearInterval(gameInterval);
                clearInterval(spawnInterval);
                gameInProgress = false;
                showFeedback(true, `Í≤åÏûÑ Ï¢ÖÎ£å! ÏµúÏ¢Ö Í∏çÏ†ï ÏóêÎÑàÏßÄ Ï†êÏàò: ${score}Ï†ê. ÎãπÏã†Ïùò Í∏çÏ†ïÏ†ÅÏù∏ ÏòÅÌñ•Î†•ÏùÄ ÎåÄÎã®ÌïòÎÑ§Ïöî!`);
                startGameBtn.disabled = false;
            }
        }, 1000);

        spawnInterval = setInterval(() => {
            if (gameInProgress) {
                spawnTarget(getDailySeed());
            }
        }, 700 - (currentRandFn() * 300)); // Faster spawning with randomization
    }

    startGameBtn.addEventListener('click', startGame);
}

// Game 5: ÏÜåÌÜµÏùò ÏïîÌò∏ Ìï¥ÎèÖ (Communication Cipher Decryption - Puzzle/Logic)
function setupCommunicationCipherDecryptionGame() {
    document.getElementById('gameTitle').innerText = "Ïò§ÎäòÏùò Í≤åÏûÑ: ÏÜåÌÜµÏùò ÏïîÌò∏ Ìï¥ÎèÖ";
    const gameArea = document.getElementById('gameArea');
    const description = "Ï£ºÏñ¥ÏßÑ ÏïîÌò∏Î•º Ìï¥ÎèÖÌïòÏó¨ Ïà®Í≤®ÏßÑ ÏÜåÌÜµ Î©îÏãúÏßÄÎ•º Ï∞æÏïÑÎÇ¥ÏÑ∏Ïöî! (ÌûåÌä∏: ÏãúÏ†Ä ÏïîÌò∏)";
    document.getElementById('gameDescription').innerText = description;

    const messages = [
        {
            encoded: "ENIJT QEBJ", // SHIFT +1: FOCUS TEAM
            decoded: "FOCUS TEAM",
            hint: "ÌåÄÏõåÌÅ¨Ïóê ÏßëÏ§ëÌïòÏÑ∏Ïöî."
        },
        {
            encoded: "HPPEJOH", // SHIFT +2: LISTENING
            decoded: "LISTENING",
            hint: "Í≤ΩÏ≤≠ÏùÄ Ï§ëÏöîÌï©ÎãàÎã§."
        },
        {
            encoded: "DPNNVOJDBUJPO", // SHIFT +1: COMMUNICATION
            decoded: "COMMUNICATION",
            hint: "ÏÜåÌÜµÏù¥ ÌïµÏã¨ÏûÖÎãàÎã§."
        }
    ];

    const message = messages[Math.floor(currentRandFn() * messages.length)];
    const shift = Math.floor(currentRandFn() * 5) + 1; // Random shift 1-5
    const encodedMessage = caesarCipher(message.decoded, shift); // Re-encode with random shift
    currentCorrectAnswer = message.decoded.toLowerCase();

    gameArea.innerHTML = `
        <div class="game-display question">Îã§Ïùå ÏïîÌò∏Î•º Ìï¥ÎèÖÌïòÏÑ∏Ïöî: <span style="color: var(--primary-color); font-weight: bold;">${encodedMessage}</span></div>
        <div class="game-display">ÌûåÌä∏: ÏãúÏ†Ä ÏïîÌò∏ (ÏïåÌååÎ≤≥ÏùÑ ${shift}Ïπ∏ Î∞ÄÏñ¥ÏÑú Ìï¥ÎèÖ)</div>
        <div class="game-input">
            <input type="text" id="cipherInput" placeholder="Ìï¥ÎèÖÎêú Î©îÏãúÏßÄ ÏûÖÎ†•"/>
            <button id="submitCipher">ÌôïÏù∏</button>
        </div>
    `;
    document.getElementById('game-input-area').innerHTML = '';
    gameInProgress = true;

    function caesarCipher(str, shift, encode = true) {
        return str.split('').map(char => {
            if (char.match(/[a-z]/i)) {
                const code = char.charCodeAt(0);
                let offset = char === char.toLowerCase() ? 97 : 65; // 'a' or 'A'
                let newCode;
                if (encode) {
                    newCode = ((code - offset + shift) % 26) + offset;
                } else {
                    newCode = ((code - offset - shift + 26) % 26) + offset;
                }
                return String.fromCharCode(newCode);
            }
            return char;
        }).join('');
    }

    document.getElementById('submitCipher').addEventListener('click', function() {
        if (!gameInProgress) return;
        const input = document.getElementById('cipherInput').value.trim().toLowerCase();
        if (input === currentCorrectAnswer.toLowerCase()) {
            showFeedback(true, `Ï†ïÎãµÏûÖÎãàÎã§! Ïà®Í≤®ÏßÑ Î©îÏãúÏßÄ: "${message.decoded}". ÎãπÏã†ÏùÄ ÏÜåÌÜµÏùò Îã¨Ïù∏Ïù¥Íµ∞Ïöî!`);
        } else {
            showFeedback(false, `ÏïÑÏâΩÎÑ§Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥ Î≥¥ÏÑ∏Ïöî. (Ï†ïÎãµ: ${message.decoded})`);
        }
        document.getElementById('cipherInput').disabled = true;
        this.disabled = true;
    });
}



// --- Game Dispatcher and Initialization ---
const gameTypes = [
    setupCooperativePacManChallengeGame,      // Game 1: ÌòëÎ†• Ìå©Îß® Ï±åÎ¶∞ÏßÄ
    setupRelationshipChessPuzzleGame,         // Game 2: Í¥ÄÍ≥ÑÏùò Ï≤¥Ïä§ ÌçºÏ¶ê
    setupEmpathyTRPGStoryGame,                // Game 3: Í≥µÍ∞êÏùò TRPG Ïä§ÌÜ†Î¶¨
    setupPositiveEnergyShootingGame,          // Game 4: Í∏çÏ†ï ÏóêÎÑàÏßÄ ÏäàÌåÖ
    setupCommunicationCipherDecryptionGame    // Game 5: ÏÜåÌÜµÏùò ÏïîÌò∏ Ìï¥ÎèÖ
];

function initDailyGame() {
    const today = new Date();
    const seed = getDailySeed();
    currentRandFn = mulberry32(seed);
    
    const dayOfWeek = today.getDay();
    document.getElementById('gameDescription').innerText = getDayOfWeekText(dayOfWeek);

    let gameTypeIndex;
    const urlParams = new URLSearchParams(window.location.search);
    const gameParam = urlParams.get('game');

    if (gameParam !== null) {
        const requestedIndex = parseInt(gameParam, 10);
        if (!isNaN(requestedIndex) && requestedIndex >= 0 && requestedIndex < gameTypes.length) {
            gameTypeIndex = requestedIndex;
        } else {
            console.warn(`Invalid game index '${gameParam}'. Falling back to random selection.`);
            gameTypeIndex = Math.floor(currentRandFn() * gameTypes.length);
        }
    } else {
        gameTypeIndex = Math.floor(currentRandFn() * gameTypes.length);
    }
    gameTypes[gameTypeIndex]();

    document.getElementById('feedbackMessage').innerText = '';
    document.getElementById('feedbackMessage').className = "feedback-message";
}

window.onload = function() {
    try {
        initDailyGame();
    } catch (e) {
        console.error("Ïò§ÎäòÏùò Í≤åÏûÑ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:", e);
        document.getElementById('gameDescription').innerText = "ÏΩòÌÖêÏ∏†Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥ Ï£ºÏÑ∏Ïöî.";
    }
};
